예외처리
    예외, 프로그램에서 오류가 날 경우
	-예상치 못한/예상이 불가능한 오류
    	-0 으로 나눌때, 배열의 인덱스를 벗어날때
    try: 
	...
    except:
	...
    위와 같은 구문으로 이뤄져 있으며, try안에서 오류가 발생하면
    남은 구문은 수행하지 않고 바로 except로 이동함

    

   	ex)
	try:
		sadfj
		print("CC")
	except:
		pass
	
	print("dd")
	
	dd 만 출력
   
    발생한 오류를 저장하여 출력 가능
    이 때 except 뒤에 Exception 이라 적으면, Exception에 오류 저장
	try:
	    sadfj
	    print("CC")
	except Exception as e:
	    print(e)
	    pass
	print("dd")

    위 코드에서 as e 는 Exception을 e라는 별칭으로 부르겠다는 의미
    Exception 대신에 에러 명칭을 사용하여 특정 예외만 처리 가능

	Exception		모든 오류에서 동작
	FileNotFoundError		파일이 없을때
	EOFError			파일의 끝인경우/읽을 내용 없을때
	ZeroDivisionError		숫자를 0으로 나누었을 때
	SyntaxError		문법(구문)오류
	KeyboardInterrupt		입력 취소(ctrl+c)	
	IndexError		리스트등 에서 없는 인덱스 요청
	KeyError			없는 키 요청
	ValueError		수행 불가능한 타입의 변수 입력
    else: 
 	try  문에서 오류가 발생하지 않을 경우 수행
    finally:
	try문에서 오류가 발생하던 안하던 "무조건" 수행
	만약, return이나 break를 만나도 finally는 수행함!

		def sq(a):
		    try:
		        a = int(a)
		        print(a*a)
		    except Exception as e:
		        print(e)
		        return None
		    else:	
		        print("문제 없이 수행 되었네요")
		    finally:
		        print("끗")
		    print("try 밖")
		    return a*a
	위 코드에서, except 일 때 return을 하지만 finally는 수행 됨

강제 오류 발생(예외 발생)
    Try - exception 을 활용하기 위한 방법으로, 
    강제로 오류를 발생 시키는 방법이 존재하며 "raise" 가 그것

    * raise 만 작성 하여도, 에러가 발생함
    * raise <에러명> 으로 작성시, 특정 예외가 발생
    * raise <에러명>(문자열) 으로 작성시, 에러 내용을 적을 수 있음

module
    함수, 변수, 클래스 들을 모아놓은 파일/구조
    다른 파이썬 프로그램(코드) 사용하기 위해 저장

    *.py 이름으로 만들면 됨
   
    import <모듈명> 명령어를 통해 모듈을 불러올 수 있음

