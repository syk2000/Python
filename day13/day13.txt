pickle
    파이선에서 내부 데이터를 파일로 저장할때 사용 가능한 모듈
    데이터의 자료형 등까지 저장해줌, (list면 list로 dict면 dict로)
    저장: file을 wb 로 열고
	pickle.dump(변수명, file)
    로드: file을 rb 로 열고
	변수명 = pickle.load(file)

min
    인자로 받은 변수들 중 가장 작은 값을 출력
    안에 list(iterable)이 들어갈 경우, 안의 값 중 가장 작은 값 출력
	ex)
	l = [1,2,3,4,5]
	i = int(input())#사용자 입력 i가 있을때
	i = min(i, len(l)-1)
	l[i]

max
    인자로 받은 변수들 중 가장 큰 값을 출력
    안에 list(iterable)이 들어갈 경우, 안의 값 중 가장 큰 값 출력
	max(3,6,7,2)

abs
    하나의 값을 인자로 받아, 절대값 출력
    복소수의 절대값 또한 가능하며, 파이선에서 복소수는
    	5+3j
    와 같이 표현함 즉, i 대신 j를 사용
	abs(-46)

zip
    여러개의 같은 갯수의 인자를 가진 iterable을 인자로 받아
    n번째 인자끼리 합쳐진 튜플을 인자로 가지는 n길이의 
    iterable을 출력


enumerate
    iterable을 인자로 받아서, 인덱스 값을 포함하는 iterable로 출력

eval
    문자열을 인자로 받아, 해당 문자열을 실행

pow
    제곱
	pow(a,b) 	-> a의 b승

sys
    현재 시스템의 정보를 가져오기 위한 모듈
    sys.argv   :  외부 인자를 가져옴
    sys.exit()  :  종료
    sys.path   :  환경변수 path 출력, 
		여기에 있는 경로와 현재 파이선 파일이 있는 경로의 
		모듈만 불러오기 가능

os
    현재 시스템의 기능을 사용하기 위한 모듈
    os.getcwd()  : 현재 내가 수행중인 위치 (내 상대경로의 기준)
    os.chdir(...)   : 내가 수행중인 위치를 변경 (인자값으로)
    os.system(..) : cmd창에서 입력한 값으로 수행
    os.popen(...) : cmd창에서 입력한 값으로 수행한 결과값을 읽기 모드의 파일로 출력
    os.mkdir(...)  : 인자로 입력받은 이름으로 폴더 생성
    os.rmdir(...)   : 인자로 입력받은 이름으로 폴더 삭제
    os.rename(a,b) : a란 이름의 파일을 b로 변경(단 현재 내 위치에 a가 있을경우)

time
    시간과 관련된 정보를 가져올때 사용
    time.time()    : 현재 시간 출력(UTC로)
	UTC라는것은, 1970년 1월 1일 0초를 기준으로 
	몇초가 지났는지를 의미하는 시간
    time.localtime() : 인자가 없을 경우, 현재 시간(시스템의 시간 기준)
		인자가 있을 경우, UTC를 시스템 시간대 기준
		(한국(서울) GMT+9) 연도/월/일/시/분/초 등 
		날자로 변경해줌
    time.asctime()	: localtime의 결과를 보다 보기 좋게 바꿔줌
    time.ctime()	: asctime() 의 결과 형태로 현재 시간을 출력
    time.sleep(..)	: 입력받은 숫자(초)만큼 프로그램이 멈춤 

절차 지향
    절차지향 이란, 우리가 여태까지 작업하던 스타일의 코드 형식을 의미
    즉, 프로그램이 위부터 아래로 수행되며, 각 기능을 같은 계층에 구현

객체 (Class)
    객체란, 프로그램에서 기능별로 나눠서 하나의 덩어리를 만드는 형식
    이를 활용하면, 같은 코드 안에서 같은 기능이 다르게 사용될때 또는
    다른 코드 안에서 같은 기능이 다시 사용될때 코드를 다시 사용 하기 편함

    일반적으로, 명사 는 객체로, 동사 는 기능으로 구현

가장 간단한 형태의 객체
class <객체명>:
    pass

객체를 사용하는 법
<변수명> = <객체명>()

객체 안의 기능은 함수 로 구현하며 메서드 라고 부름
class 안의 메서드는 인덴트로 클래스 안임을 구별하며, 
첫번째 인자로 self를 사용해야 함

단 메서드 호출 시엔, self는 무시하고 호출

class test:
    def t(self):
        print("i am in the class!!")

계산기라면...
    기능(메소드)
	    사칙연산(+-*//)
	    결과 출력

