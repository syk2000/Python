Class(2)
    맴버변수 선언
	선언 방식 1.
		class ...:
			test = []
			test2 = 0
	선언 방식 2.
		class ...:
			def __init__(self):
				self.test = []
				self.test2 = 0

    1번과 같이 선언할 경우 아래와 같은 상황이 발생하므로
    되도록 2번과 같은 방식을 통해 선언하도록 함
	>>> c = Calc()
	>>> b = Calc()
	>>> c.test.append(4)
	>>> c.test2 = 5
	>>> b.test
	[4]
	>>> b.test2
	0
	>>> Calc.test2
	0	
	>>> Calc.test2 =5
	>>> Calc.test2  = 10
	>>> b.test2
	10
    즉, 객체끼리는 값을 공유하지 않아야 하지만, 
    다른 객체(object)에서 변경한 값이 다른 객체에 영향을 줄 수 있음
    이를 클래스 변수라 함

상속
    class <클래스 이름>(상속받을 클래스 이름):
        ....
    위와 같이 상속 받을 수 있음
    상속 받게 되면, 상속받을 클래스의 변수/메서드 등을 모두 사용 가능
    이 때, 상속 해주는 클래스를 "부모 클래스",
    상속 받는 클래스를 "자식 클래스" 라 부름

메서드 오버라이딩
    상속 받았을 때, 부모 클래스 안에 있는 메서드와 같은 이름으로
    자식 클래스에서 선언 가능

    이 때, 자식 클래스에서 선언한 메서드가 우선되어 수행되며,
    이를 오버라이딩 이라고 부름

    주의할 점은, 오버라이딩을 할 경우, 부모 클래스에서 자신의 메서드를
    사용하던, 다른 메서드에서 호출하는 함수도 오버라이딩한 함수로
    호출이 변경될 수 있음

class A:
    def p(self):
        print("A")
    def pa(self):
        self.p()

class B(A):
    def p(self):
        print("B")
    def pb(self):
        self.p()

t = B()
t.pb() 와 t.pa() 결과가 같음!

   이를 방지하기 위해 아래와 같이 작성할수 있음
class A:
    def p(self):
        print("A")
    def pa(self):
        A.p(self)