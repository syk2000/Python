함수(2)
    같은 이름의 함수는 2개 존재할수 없음
    인자에 값을 처음부터 대입한 상태로 사용 가능

	ex)
	def test():
		print(a)
	def test(n):
		print(n)

     위와 같을 때, 먼저 작성한 test()함수는 
     나중에 작성한 test(n) 함수로 대체됨

	ex)
 	def test(n = a):
		print(n)
     위와 같이 작성하는 것으로, test()와 test(n) 
     두 경우 모두 작동하는 코드 작성 가능


함수(3) - 가변 인자
    인자 이름 앞에 * 또는 **을 붙여서 가변 길이 인자를 선언 가능
    똑같이 가변 인자를 가진 함수에 전달도 가능함
	ex)
	>>> def sum_many(*v):
		res = 0
		for i in v:
			res += i
		return res

	>>> def avg_many(*v):
		return (sum_many(*v) / len(v))

	>>> 
	>>> sum_many(3,3,3,3)
	12
	>>> avg_many(3,3,3,3)
	3.0

    **의 경우 일반 함수에 전달도 가능함
	ex)	
	>>> def tt(a=1, b=2):
		print(a, b)
		
	
	>>> def tt2(**v):
		tt(**v)

	
	>>> tt2(a=1, b=2)
	1 2

딕셔너리(dict)
    { 와 } 사이에 원하는 값을 입력하여 선언
    각 값은 key:value 쌍으로 이뤄져 있으며, key 를 통해 value에 접근
	ex) 
	di = {1:'a', 2:'b'}
	di[1] 	-> 'a'

    값을 추가할 때에는, 값을 접근할때와 똑같이 하되, 
    해당 key가 비어있다면, 값이 추가됨
	ex)
	di = {1:'a', 2:'b'}
	di[3] = 'c'
	di 	-> {1:'a', 2:'b', 3:'c'}
 
    keys()		저장된 key값들의 리스트를 출력	dic.keys()
    values()	저장된 value값들의 리스트를 출력	dic.value()
    items()	저장된 key,value 쌍 튜플 리스트 출력	dic.items()
    clear()		저장된 값을 모두 삭제		dic.clear()
    get()		해당 키가 있으면, value, 없으면 None	dic.get(key)

	get() 은, 키가 있던 없던 오류가 나지 않음,
		"하지만" 읽기만 가능함!
	[n] 으로 접근시, 없는 키를 읽으려 하면 오류가 남
		읽기, 쓰기, 추가 모두 가능
    setdefault()	해당 키가 있음 value, 없으면 입력된 값	dic.setdefault(키, 값) 
		해당 key, value 쌍으로 딕셔너리에 추가
    update()	다른 딕셔너리 내용으로 갱신		dic.update(other_dic)
    pop()		key에 해당하는 값을 삭제 및 출력	dic.pop(key)
    fromkeys()	입력받은 key 리스트로 설정된 dic 출력	dict.fromkeys(key_list)
						dict.fromkeys(keys_list, value)

    collections.OrderedDict()
	딕셔너리는 입력 순서대로 값이 저장되는게 보장되지 않음
	입력 순서가 보장 되는게 필요할 경우 사용 가능함
	
	di = collections.OrderedDict()

	사용법은 딕셔너리와 "동일"


	

    